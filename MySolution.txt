Edited by: Tich Zvidzayi
Last Modifed: 12/05/2023
________________________________________________________________________________
  I worked in Windows 11 environment using the following tools:
       - Java 19
       - Maven 3.8.5
       -  IDE (Intelij community edition). 
 _____________________________________________________________________________________ 
                                     Part 1 
Abstraction 
  Abstraction through interfaces allows us to define common behavior that implementing classes must adhere to
    Use of IBondCalculator interface to declare 
    - printBondInstalmentAmount(double x);
    - printBondSchedule(double[] x);
    - FormatToZar(double value); 
    This can also be achieved through abstract classes.


 Inheritance
   BondCalculator class inherits/extends from PrintInfo class.


Encapsulation
Encapsulation helps in achieving data hiding, abstraction, and better organization of code.
Use of access modifiers in classes like private 
private double[] calculateRemainingLoanBalance()
private short getNumberOfPayments() 


Polymorphism 
Achieved via overloading (static polymorphism) and overriding (dynamic polymorphism) methods 
BondCalculator Class 
 - printSchedule( Date ) -- overloaded  
 - FormatToZar() -- overridden
 PrintInfo Class
 - printBondSchedule( double, Date) -- overloaded
_____________________________________________________________________________________________
 
                                    Part 2 

Ensure the return type of printBondInstalmentAmount() method is formatted to ZAR currency. 
e.g. (Bond instalment = ZAR4825.10) 
____________________________________________________________________________________________
 
                                    Part 3

Ensure the balance in the printBondSchedule() method is formatted to ZAR currency. 
e.g. - (ZAR499341.55) without rounding up

_____________________________________________________________________________________________
 
                                    Part 4
Created 18 (eighteen) test cases using the JUnit library.The program tested for cases where the result was true and cases
where the result was false ( returns an exception)